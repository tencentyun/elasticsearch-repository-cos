//import org.elasticsearch.gradle.MavenFilteringHack
//import org.elasticsearch.gradle.testclusters.TestClustersRegistry
//import org.elasticsearch.gradle.testclusters.TestClustersPlugin


buildscript {
    ext {
        pluginName = project.properties['pluginName']
        publishedPluginVersion = project.properties['esVersion']
        pluginVersion = project.properties['esVersion']
        esVersion = project.properties['esVersion']
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven{ url 'https://plugins.gradle.org/m2/'}
    }

    dependencies {
        classpath 'org.elasticsearch.gradle:build-tools:'  + esVersion
        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.16.1'
    }
}

// import external plugin
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'maven-publish'
apply plugin: 'com.github.hierynomus.license'

sourceCompatibility = 17
targetCompatibility = 17
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

ext.projectSubstitutions = [:]
// license of this project
//licenseFile = rootProject.file('LICENSE.txt')

license {
    header rootProject.file('LicenseHeader.txt')
    skipExistingHeaders true
    useDefaultMappings = false
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// copyright notices
//noticeFile = rootProject.file('NOTICE.txt')

esplugin {
    name pluginName
    description 'The Cos Repository plugin adds support for using Tencent Cloud Cos as a repository fro Snapshot/Restore.'
    classname 'org.elasticsearch.repositories.cos.COSRepositoryPlugin'
    version pluginVersion
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.elasticsearch:elasticsearch:" + esVersion
    implementation "com.qcloud:cos_api:5.6.231"
    implementation "commons-codec:commons-codec:1.13"
    implementation "commons-logging:commons-logging:1.2"
    implementation "com.fasterxml.jackson.core:jackson-core:2.17.2"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.17.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.17.2"
    implementation "org.apache.httpcomponents:httpclient:4.5.13"
    implementation "org.apache.httpcomponents:httpcore:4.4.16"
    implementation "org.apache.logging.log4j:log4j-api:2.17.1"
    implementation "org.apache.logging.log4j:log4j-core:2.17.1"
    implementation "org.slf4j:slf4j-api:2.0.16"
    implementation "org.slf4j:slf4j-reload4j:2.0.16"
    testImplementation "org.elasticsearch.test:yaml-rest-runner:" + esVersion
}

configurations.all {
    resolutionStrategy.force "joda-time:joda-time:2.10.4"
    resolutionStrategy.force "com.fasterxml.jackson.core:jackson-core:2.17.2"
    resolutionStrategy.force "commons-codec:commons-codec:1.11"
    resolutionStrategy.force "commons-logging:commons-logging:1.2"
    resolutionStrategy.force "org.apache.httpcomponents:httpclient:4.5.10"
    exclude group:"com.fasterxml.jackson.dataformat"
}

bundlePlugin {

}

test {
    exclude '**/CosRepositoryThirdPartyTests.class'
    dependsOn processTestResources
}

String cosAccessKeyId = System.getenv("qcloud_cos_access_key_id")
String cosAccessKeySecret = System.getenv("qcloud_cos_access_key_secret")
String cosBucket = System.getenv("qcloud_cos_bucket")
String cosBasePath = System.getenv("qcloud_cos_base_path")
String cosRegion = System.getenv("qcloud_cos_region")

task thirdPartyTest(type: Test) {
    include '**/CosRepositoryThirdPartyTests.class'
    systemProperty 'es.allow_insecure_settings', 'true'
    systemProperty 'access_key_id', cosAccessKeyId
    systemProperty 'access_key_secret', cosAccessKeySecret
    systemProperty 'bucket', cosBucket
    systemProperty 'base_path', cosBasePath
    systemProperty 'region', cosRegion
}

thirdPartyTest {
    dependsOn tasks.bundlePlugin
}

//processTestResources {
//    Map<String, Object> expansions = [
//            'accessKeyId': cosAccessKeyId,
//            'accessKeySecret': cosAccessKeySecret,
//            'cosBucket': cosBucket,
//            'cosBasePath': cosBasePath,
//    ]
//    inputs.properties(expansions)
////    MavenFilteringHack.filter(it, expansions)
//}

//integTest {
//    dependsOn processTestResources
//}

// elasticsearch.esplugin task configure
//checkstyleMain.enabled = false
//checkstyleTest.enabled = false
//dependencyLicenses.enabled = false
//licenseMain.enabled = false
//thirdPartyAudit.enabled = false
//licenseHeaders.enabled = false
//forbiddenApisMain.enabled = false
//forbiddenApisTest.enabled = false
//licenseTest.enabled = false


//TestClustersRegistry registry = project.rootProject.extensions.create("testClustersRegistry", TestClustersRegistry)
//TestClustersPlugin.configureClaimClustersHook(project.gradle, registry)
//TestClustersPlugin.configureStartClustersHook(project.gradle, registry)
//TestClustersPlugin.configureStopClustersHook(project.gradle, registry)